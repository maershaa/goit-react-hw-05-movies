{"version":3,"file":"static/js/983.ff8eae92.chunk.js","mappings":"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","sources":["components/MoviesList/MovieItem/StylesdMovieListItem.js","components/MoviesList/MovieItem/MovieItem.jsx","components/MoviesList/StyledMovieList.js","components/MoviesList/MoviesList.jsx","refs/refs.js","components/api/api.js","pages/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledMovieListItem = styled.li`\n  padding: 20px;\n  list-style: none;\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 20px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 8px;\n\n  /* Стили для контейнера карточки */\n  .movieCard {\n    position: relative;\n    width: 260px;\n    height: 390px;\n    perspective: 1000px;\n    border-radius: 20px;\n  }\n\n  /* Стили для передней стороны */\n  .movieCardFront {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    backface-visibility: hidden;\n    transition: transform 1.2s ease; /* Увеличено время перехода */\n  }\n\n  /* Стили для обратной стороны */\n  .movieCardBack {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    backface-visibility: hidden;\n    transform: rotateY(180deg);\n    transition: transform 1.2s ease, opacity 1.2s ease; /* Увеличено время перехода */\n    background-color: #ffffff;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  /* Показываем обратную сторону при наведении */\n  .movieCard:hover .movieCardFront {\n    transform: rotateY(180deg);\n  }\n\n  .movieCard:hover .movieCardBack {\n    transform: rotateY(0deg);\n    opacity: 1;\n    pointer-events: auto;\n    background-color: rgb(54, 155, 175);\n    color: white;\n    border-radius: 20px;\n\n    overflow-x: auto;\n  }\n\n  .moviePoster {\n    border-radius: 20px;\n  }\n\n  .front {\n    padding-left: 10px;\n    padding-top: 10px;\n  }\n\n  .overviewText {\n    padding-left: 10px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n  }\n\n  .ratingCircle {\n    position: absolute;\n    padding: 5px;\n    bottom: -18px;\n    left: -18px;\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    background-color: #ffcc00; /* Цвет фона для круглого значка */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    color: #ffffff; /* Цвет текста внутри круглого значка */\n    font-size: 20px; /* Размер текста */\n  }\n`;\n","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { StyledMovieListItem } from 'components/MoviesList/MovieItem/StylesdMovieListItem';\n\nconst MovieItem = ({ id, poster_path, title, overview, raiting }) => {\n  const navigate = useNavigate();\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleItemClick = () => {\n    navigate(`/movies/${id}`);\n  };\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n  };\n\n  // Функция для округления рейтинга до одной десятой\n  const calculateRoundedRating = rate => {\n    const numericRating = Number(rate);\n    return numericRating.toFixed(1);\n  };\n\n  // Расчет округленного рейтинга на основе полученного рейтинга из API\n  const roundedRating = calculateRoundedRating(raiting);\n\n  return (\n    <StyledMovieListItem\n      className={`movieItem ${isHovered ? 'hovered' : ''}`}\n      onClick={handleItemClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <div className=\"movieCard\">\n        <div className={`movieCardFront ${isHovered ? 'hovered' : ''}`}>\n          <img\n            src={`https://image.tmdb.org/t/p/original${poster_path}`}\n            alt={title}\n            className=\"moviePoster front\"\n          />\n          {/* Круглый значок с рейтингом фильма */}\n          <div className=\"ratingCircle\">\n            <p className=\"ratingText\">{roundedRating}</p>\n          </div>\n        </div>\n        <div className={`movieCardBack ${isHovered ? 'hovered' : ''}`}>\n          <h3 className=\"front\">{title}</h3>\n          <p className=\"overviewText back\">{overview}</p>\n        </div>\n      </div>\n    </StyledMovieListItem>\n  );\n};\n\nexport default MovieItem;\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledMovieList = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  margin-right: auto;\n  margin-left: auto;\n`;\n","import React from 'react';\nimport MovieItem from 'components/MoviesList/MovieItem/MovieItem';\nimport { useNavigate } from 'react-router-dom';\nimport { StyledMovieList } from 'components/MoviesList/StyledMovieList';\n\n// Компонент для отображения списка фильмов\nconst MoviesList = ({ movies }) => {\n  // Хук навигации из React Router для перехода на другие страницы\n  const navigate = useNavigate();\n  const handleMovieClick = movieId => {\n    navigate(`/movies/${movieId}`);\n  };\n\n  return (\n    <StyledMovieList className=\"moviesList\">\n      {/* Проверка, что массив movies не является null или undefined */}\n      {movies &&\n        // Отображаем каждый элемент списка фильмов\n        movies.map(movie => (\n          <MovieItem\n            key={movie.id}\n            id={movie.id}\n            poster_path={movie.poster_path}\n            title={movie.title}\n            overview={movie.overview}\n            raiting={movie.vote_average}\n            // Используем функцию для загрузки выбранного фильма при клике\n            onClick={() => handleMovieClick(movie.id)}\n          ></MovieItem>\n        ))}\n    </StyledMovieList>\n  );\n};\n\nexport default MoviesList;\n","export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = 'c23a5d8272617f6f7021ba4c498464ff';\n","import axios from 'axios'; //npm install axios\n\nimport { BASE_URL, API_KEY } from 'refs/refs';\n\nexport const getTrendingFilm = async () => {\n  const resp = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n  const data = resp.data;\n\n  return data;\n};\n\nexport const getFilmById = async movieId => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    const data = resp.data;\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getSearchMovie = async searchQuery => {\n  const resp = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`\n  );\n  const data = resp.data;\n\n  return data;\n};\n\nexport const getReviewMovie = async movieID => {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieID}/reviews?api_key=${API_KEY}`\n  );\n  const data = resp.data;\n  return data;\n};\n\nexport const getCastMovie = async movieID => {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieID}/credits?api_key=${API_KEY}`\n  );\n  const data = resp.data;\n  return data;\n};\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader'; //npm install react-loader-spinner --save\nimport { getTrendingFilm } from 'components/api/api.js';\n\nconst HomePage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState(null); // Состояние для хранения\n\n  const navigate = useNavigate();\n  const handleMovieClick = movieId => {\n    navigate(`/movies/${movieId}`);\n  };\n\n  // Функция для выполнения запроса\n  const fetchAndSetMovies = async () => {\n    try {\n      setIsLoading(true); // Устанавливаем флаг загрузки в true\n      setError(null); // Сбрасываем сообщение об ошибке\n\n      const data = await getTrendingFilm(); // Вызываем функцию getTrendingFilm\n\n      const movies = data.results; // Получаем новые фильмы\n\n      setMovies(movies); // Устанавливаем обновленные фильмы\n      setError(null); // Сбрасываем сообщение об ошибке\n    } catch (error) {\n      setError(error.message); // Устанавливаем сообщение об ошибке\n      setMovies(null); // Сбрасываем фильмы в случае ошибки\n    } finally {\n      setIsLoading(false); // В любом случае завершаем запрос, сбрасывая флаг загрузки\n    }\n  };\n\n  useEffect(() => {\n    fetchAndSetMovies();\n  }, []);\n\n  return (\n    <div>\n      {error !== null && (\n        <p className=\"errorBadge\">\n          Oops, some error occurred... Error message: {error}\n        </p>\n      )}\n\n      {isLoading && <Loader />}\n\n      <h2 className=\"pageTitle\"> Trending today </h2>\n      <MoviesList movies={movies} onClick={handleMovieClick} />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"names":["StyledMovieListItem","styled","_templateObject","_taggedTemplateLiteral","_ref","id","poster_path","title","overview","raiting","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","isHovered","setIsHovered","roundedRating","Number","toFixed","_jsx","className","concat","onClick","onMouseEnter","onMouseLeave","children","_jsxs","src","alt","StyledMovieList","movies","map","movie","MovieItem","vote_average","movieId","BASE_URL","API_KEY","getTrendingFilm","_asyncToGenerator","_regeneratorRuntime","_callee","resp","data","_context","prev","next","axios","sent","abrupt","stop","apply","arguments","getFilmById","_ref2","_callee2","_context2","t0","_x","getSearchMovie","_ref3","_callee3","searchQuery","_context3","_x2","getReviewMovie","_ref4","_callee4","movieID","_context4","_x3","getCastMovie","_ref5","_callee5","_context5","_x4","isLoading","setIsLoading","_useState3","_useState4","error","setError","_useState5","_useState6","setMovies","fetchAndSetMovies","_movies","results","message","finish","useEffect","Loader","MoviesList"],"sourceRoot":""}