{"version":3,"file":"static/js/66.2d540fa5.chunk.js","mappings":"oMAEaA,E,OAAkBC,GAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,o+B,SCsB5C,EApBkB,WAChB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAWjB,OACEC,EAAAA,EAAAA,KAACR,EAAe,CAACS,QATE,WACfL,EAASM,OAASN,EAASM,MAAMC,KACnCL,EAASF,EAASM,MAAMC,MAExBL,EAAS,IAEb,EAG0CM,UAAU,UAASC,SAAC,UAIhE,C,8DCpBMC,EAAW,gCACXC,EAAU,mCAEVC,EAAW,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAOC,GAAQ,IAAAC,EAAAC,EAAAC,EAAAC,UAAA,OAAAN,IAAAA,MAAA,SAAAO,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAc,OAAZN,EAAOE,EAAAK,OAAA,QAAAC,IAAAN,EAAA,GAAAA,EAAA,GAAG,CAAC,EAACE,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEtBG,EAAAA,EAAAA,IAAU,GAADC,OAC3BlB,GAAQkB,OAAGX,EAAQ,aAAAW,OAAYjB,GAClCO,GACA,KAAD,EACwC,OAJnCC,EAAQG,EAAAO,KAIdC,QAAQC,IAAI,kBAAmBZ,GAAUG,EAAAU,OAAA,SAClCb,EAASc,MAAI,aAAAX,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,SAAAA,EAAAY,GAAC,KAAD,oBAAAZ,EAAAa,OAAA,GAAAnB,EAAA,kBAIvB,gBAXgBoB,GAAA,OAAAvB,EAAAwB,MAAA,KAAAhB,UAAA,KAajB,K,0KCjBaiB,E,OAAqBzC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,moB,SCiK5C,EAzJqB,WAEnB,IAAQwC,GAAYC,EAAAA,EAAAA,MAAZD,QAERE,GAAwCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAEpCI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAGhBG,EAAgB,eAAA1C,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMwC,GAAE,IAAAvB,EAAA,OAAAlB,IAAAA,MAAA,SAAAO,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAO7B,OAP6BF,EAAAC,KAAA,EAG7B2B,GAAa,GAEbI,EAAS,MAEThC,EAAAE,KAAA,GACmBZ,EAAAA,EAAAA,GAAY,SAADgB,OAAU4B,GAAM,CAC5CC,OAAQ,CACNC,SAAU,WAEX,KAAD,EAJIzB,EAAIX,EAAAO,KAOViB,EAAgBb,GAEhBqB,EAAS,MAAMhC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,SAGfgC,EAAShC,EAAAY,GAAMyB,SAEfb,EAAgB,MAAM,QAGF,OAHExB,EAAAC,KAAA,GAGtB2B,GAAa,GAAO5B,EAAAsC,OAAA,6BAAAtC,EAAAa,OAAA,GAAAnB,EAAA,yBAEvB,gBA3BqBoB,GAAA,OAAAvB,EAAAwB,MAAA,KAAAhB,UAAA,KAoCtB,IANAwC,EAAAA,EAAAA,YAAU,WAERN,EAAiBhB,EACnB,GAAG,CAACA,IAGCM,EAAL,CAKA,IACEiB,EASEjB,EATFiB,MACAC,EAQElB,EARFkB,aACAC,EAOEnB,EAPFmB,aACAC,EAMEpB,EANFoB,SACAC,EAKErB,EALFqB,OACAC,EAIEtB,EAJFsB,YACAC,EAGEvB,EAHFuB,cACAC,EAEExB,EAFFwB,QACAC,EACEzB,EADFyB,QAIIC,EAAwB,CAC5BC,gBAAgB,yHAAD5C,OAA2HwC,EAAa,MAuBnJK,EAlBkBC,OAkBqBV,GAjBtBW,QAAQ,GAoB/BC,EAhByB,SAAAP,GACvB,IAAMQ,EAAiBH,OAAOL,GAG9B,MAAO,CAAES,MAFKC,KAAKC,MAAMH,EAAiB,IAE1BI,QADAJ,EAAiB,GAEnC,CAW2BK,CAAiBb,GAApCS,EAAKF,EAALE,MAAOG,EAAOL,EAAPK,QAGTE,EAVG,IAAIC,KAU0BrB,GAVRsB,cAY/B,OACEC,EAAAA,EAAAA,MAAChD,EAAkB,CAAA7B,SAAA,CACN,OAAV4C,IACCiC,EAAAA,EAAAA,MAAA,KAAG9E,UAAU,aAAYC,SAAA,CAAC,+CACqB4C,KAGhDJ,IAAa7C,EAAAA,EAAAA,KAACmF,EAAAA,EAAM,KACrBnF,EAAAA,EAAAA,KAACoF,EAAAA,EAAS,KACVF,EAAAA,EAAAA,MAAA,MAAA7E,SAAA,CAAI,cAAY8B,KAAa,KAC7B+C,EAAAA,EAAAA,MAAA,OAAK9E,UAAU,qBAAqBiF,MAAOlB,EAAsB9D,SAAA,EAE/DL,EAAAA,EAAAA,KAAA,OACEsF,IAAG,sCAAA9D,OAAwCuC,GAC3CwB,IAAK7B,EACL2B,MAAO,CAAEG,OAAQ,YAGnBN,EAAAA,EAAAA,MAAA,OAAK9E,UAAU,gBAAeC,SAAA,EAC5B6E,EAAAA,EAAAA,MAAA,MAAI9E,UAAU,QAAOC,SAAA,CAClBqD,EAAM,MAAIqB,EAAY,QAGzB/E,EAAAA,EAAAA,KAAA,KAAGI,UAAU,SAAQC,SAAE6D,KACvBgB,EAAAA,EAAAA,MAAA,KAAA7E,SAAA,CAAG,WACQgE,EAAc,qBAAkB,GAAA7C,OAAIkD,EAAK,MAAAlD,OAAKqD,EAAO,SAEhE7E,EAAAA,EAAAA,KAAA,MAAII,UAAU,YAAWC,SAAC,cAC1BL,EAAAA,EAAAA,KAAA,KAAAK,SAAIwD,KAEJ7D,EAAAA,EAAAA,KAAA,MAAII,UAAU,YAAWC,SAAC,YAC1BL,EAAAA,EAAAA,KAAA,MAAII,UAAU,aAAYC,SACvByD,EAAO2B,KAAI,SAAAC,GAAK,OACf1F,EAAAA,EAAAA,KAAA,MAAAK,SAAoBqF,EAAMC,KAAKC,eAAtBF,EAAMtC,GAAmC,OAGtDpD,EAAAA,EAAAA,KAAA,MAAAK,SAAI,4BACJ6E,EAAAA,EAAAA,MAAA,MAAA7E,SAAA,EACEL,EAAAA,EAAAA,KAAA,MAAAK,UACEL,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACzF,UAAU,cAAc0F,GAAG,OAAMzF,SAAC,YAI1CL,EAAAA,EAAAA,KAAA,MAAAK,UACEL,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACzF,UAAU,cAAc0F,GAAG,UAASzF,SAAC,wBAOnDL,EAAAA,EAAAA,KAAC+F,EAAAA,GAAM,MAnGX,CAsGF,C","sources":["components/GoBackBtn/StyledGoBackBtn.js","components/GoBackBtn/GoBackBtn.jsx","components/api/api.js","pages/StyledMovieDetails.js","pages/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledGoBackBtn = styled.button`\n  cursor: pointer;\n  text-decoration: none;\n  background: rgb(3, 37, 65);\n  font-size: 18px;\n  color: #369baf;\n  padding: 10px;\n  margin-top: 15px;\n  margin-left: 10px;\n  margin-bottom: 20px;\n  display: inline-flex;\n  border: 1px solid #369baf;\n  border-radius: 10px;\n  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n    -webkit-transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    transform: scale(1.1); /* Измените масштаб по вашему усмотрению */\n    transition: transform 0.3s ease; /* Добавьте плавное переходное свойство */\n  }\n`;\n","import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { StyledGoBackBtn } from 'components/GoBackBtn/StyledGoBackBtn';\n\nconst GoBackBtn = () => {\n  const location = useLocation(); // Хук для получения объекта location из React Router\n  const navigate = useNavigate(); // Хук для навигации по маршрутам\n\n  // Функция для возврата на предыдущую страницу\n  const handleGoBack = () => {\n    if (location.state && location.state.from) {\n      navigate(location.state.from); // Возвращение на предыдущий маршрут\n    } else {\n      navigate('/'); // Возвращение на главную страницу по умолчанию\n    }\n  };\n\n  return (\n    <StyledGoBackBtn onClick={handleGoBack} className=\"backBtn\">\n      &#8617;\n    </StyledGoBackBtn>\n  );\n};\n\nexport default GoBackBtn;\n","import axios from 'axios'; //npm install axios\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c23a5d8272617f6f7021ba4c498464ff';\n\nconst fetchMovies = async (endpoint, options = {}) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}${endpoint}?api_key=${API_KEY}`,\n      options\n    );\n    console.log('response in api', response);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default fetchMovies;\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledMovieDetails = styled.div`\n  .movieInfoContainer {\n    display: flex;\n    flex-direction: row;\n    padding: 20px;\n    column-gap: 40px;\n\n    border-bottom: 1px solid #369baf;\n    background-size: cover;\n    background-repeat: no-repeat;\n  }\n\n  .infoContainer {\n    max-width: 45%;\n    align-items: center;\n  }\n\n  .title {\n    font-size: 32px;\n    font-weight: 700;\n  }\n\n  .infoTitle {\n    font-size: 24px;\n    font-weight: 700;\n  }\n\n  .slogan {\n    font-style: italic;\n  }\n\n  .genresList {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    column-gap: 8px;\n\n    list-style: none;\n\n    padding: 0;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams, Outlet } from 'react-router-dom';\n// import Cast from 'pages/Cast';\n// import Reviews from 'pages/Reviews';\nimport fetchMovies from 'components/api/api';\nimport Loader from 'components/Loader/Loader'; //npm install react-loader-spinner --save\nimport GoBackBtn from 'components/GoBackBtn/GoBackBtn';\n\nimport { StyledMovieDetails } from 'pages/StyledMovieDetails';\nconst MovieDetails = () => {\n  // Извлечение movieId из параметров URL\n  const { movieId } = useParams();\n  // Состояние для хранения детальной информации о фильме\n  const [movieDetails, setMovieDetails] = useState(null);\n  // Состояние для отслеживания состояния загрузки\n  const [isLoading, setIsLoading] = useState(false);\n  // Состояние для обработки ошибок\n  const [error, setError] = useState(null);\n\n  // Функция для запроса детальной информации о выбранном фильме\n  const fetchChosenMovie = async id => {\n    try {\n      // Установить флаг загрузки в true перед запросом\n      setIsLoading(true);\n      // Сбросить состояние ошибки перед запросом\n      setError(null);\n\n      // Запрос к API для получения детальной информации о фильме по его ID\n      const data = await fetchMovies(`movie/${id}`, {\n        params: {\n          language: 'en-US',\n        },\n      });\n\n      // Установка детальной информации о фильме в состояние\n      setMovieDetails(data);\n      // Сбросить состояние ошибки\n      setError(null);\n    } catch (error) {\n      // Установка состояния ошибки в случае ошибки\n      setError(error.message);\n      // Сбросить состояние деталей фильма в случае ошибки\n      setMovieDetails(null);\n    } finally {\n      // Установка флага загрузки в false в любом случае после завершения запроса, независимо от его успешности\n      setIsLoading(false);\n    }\n  };\n\n  // useEffect для выполнения запроса, когда компонент монтируется или изменяется movieId\n  useEffect(() => {\n    // Вызов функции fetchChosenMovie при изменении movieId\n    fetchChosenMovie(movieId);\n  }, [movieId]);\n\n  // !!!!Проверка, есть ли данные в movieDetails перед их отображением  КАК РЕАЛИЗОВАТЬ ИНАЧЕ?\n  if (!movieDetails) {\n    return;\n  }\n\n  // Деструктуризация данных из movieDetails\n  const {\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    poster_path,\n    backdrop_path,\n    runtime,\n    tagline,\n  } = movieDetails;\n\n  // Создаем стиль для фона, используя линейный градиент и изображение фона из API\n  const backgroundImageStyles = {\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(https://www.themoviedb.org/t/p/w1920_and_h800_multi_faces${backdrop_path})`,\n  };\n\n  // Функция для округления рейтинга до одной десятой\n  const calculateRoundedRating = rating => {\n    const numericRating = Number(rating);\n    return numericRating.toFixed(1);\n  };\n\n  // Функция для расчета продолжительности фильма в часах и минутах\n  const calculateRuntime = runtime => {\n    const numericRuntime = Number(runtime);\n    const hours = Math.floor(numericRuntime / 60);\n    const minutes = numericRuntime % 60;\n    return { hours, minutes };\n  };\n\n  // Функция для извлечения года из даты выпуска фильма\n  const extractReleaseYear = releaseDate => {\n    return new Date(releaseDate).getFullYear();\n  };\n\n  // Расчет округленного рейтинга на основе полученного рейтинга из API\n  const roundedRating = calculateRoundedRating(vote_average);\n\n  // Расчет продолжительности фильма в часах и минутах на основе полученных данных из API\n  const { hours, minutes } = calculateRuntime(runtime);\n\n  // Извлечение года выпуска фильма из даты, полученной из API\n  const releaseYear = extractReleaseYear(release_date);\n\n  return (\n    <StyledMovieDetails>\n      {error !== null && (\n        <p className=\"errorBadge\">\n          Oops, some error occurred... Error message: {error}\n        </p>\n      )}\n      {isLoading && <Loader />}\n      <GoBackBtn></GoBackBtn>\n      <h1> Movie Id: {movieId}</h1> {/* !Заглушка для проверки movieId */}\n      <div className=\"movieInfoContainer\" style={backgroundImageStyles}>\n        {/* Отображаем постер фильма */}\n        <img\n          src={`https://image.tmdb.org/t/p/original${poster_path}`}\n          alt={title}\n          style={{ height: '460px' }}\n        />\n\n        <div className=\"infoContainer\">\n          <h2 className=\"title\">\n            {title} ( {releaseYear})\n          </h2>\n\n          <p className=\"slogan\">{tagline}</p>\n          <p>\n            Rating: {roundedRating} &bull; Duration: {`${hours}h ${minutes}m`}\n          </p>\n          <h3 className=\"infoTitle\">Overview</h3>\n          <p>{overview}</p>\n\n          <h3 className=\"infoTitle\">Genres</h3>\n          <ul className=\"genresList\">\n            {genres.map(genre => (\n              <li key={genre.id}>{genre.name.toLowerCase()}</li>\n            ))}\n          </ul>\n          <h3>Additional Information</h3>\n          <ul>\n            <li>\n              <Link className=\"header-link\" to=\"cast\">\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link className=\"header-link\" to=\"reviews\">\n                Reviews\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <Outlet />\n    </StyledMovieDetails>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["StyledGoBackBtn","styled","_templateObject","_taggedTemplateLiteral","location","useLocation","navigate","useNavigate","_jsx","onClick","state","from","className","children","BASE_URL","API_KEY","fetchMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","endpoint","options","response","_args","arguments","_context","prev","next","length","undefined","axios","concat","sent","console","log","abrupt","data","t0","stop","_x","apply","StyledMovieDetails","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieDetails","setMovieDetails","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","fetchChosenMovie","id","params","language","message","finish","useEffect","title","release_date","vote_average","overview","genres","poster_path","backdrop_path","runtime","tagline","backgroundImageStyles","backgroundImage","roundedRating","Number","toFixed","_calculateRuntime","numericRuntime","hours","Math","floor","minutes","calculateRuntime","releaseYear","Date","getFullYear","_jsxs","Loader","GoBackBtn","style","src","alt","height","map","genre","name","toLowerCase","Link","to","Outlet"],"sourceRoot":""}