{"version":3,"file":"static/js/227.a1425bab.chunk.js","mappings":"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","sources":["components/api/api.js","components/MoviesList/MovieItem/MovieItem.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage.jsx"],"sourcesContent":["import axios from 'axios'; //npm install axios\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c23a5d8272617f6f7021ba4c498464ff';\n\nconst fetchMovies = async () => {\n  try {\n    const response = await axios.get(\n      // Получение списка популярных фильмов за неделю\n      `${BASE_URL}trending/all/week?api_key=${API_KEY}`\n    );\n    console.log('response in api', response);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default fetchMovies;\n","import React from 'react';\n\nconst MovieItem = ({ id, poster_path, title, onClick }) => {\n  const handleMovieClick = () => {\n    if (onClick) {\n      onClick(id);\n    }\n  };\n\n  return (\n    <li className=\"movieItem\" onClick={handleMovieClick}>\n      <h3>{title}</h3>\n      <img\n        src={`https://image.tmdb.org/t/p/original${poster_path}`}\n        alt={title}\n      />\n    </li>\n  );\n};\n\nexport default MovieItem;\n","import React from 'react';\nimport MovieItem from 'components/MoviesList/MovieItem/MovieItem';\n\nconst MoviesList = ({ movies, onClick }) => {\n  return (\n    <ul className=\"moviesList\">\n      {movies.map(movie => (\n        <MovieItem\n          key={movie.id}\n          id={movie.id}\n          poster_path={movie.poster_path}\n          title={movie.title}\n          onClick={onClick}\n        ></MovieItem>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","import React, { useState, useEffect } from 'react';\nimport fetchMovies from 'components/api/api';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader'; //npm install react-loader-spinner --save\n\nconst HomePage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  // const [inputValue, setInputValue] = useState('');\n  // const [currentPage, setCurrentPage] = useState(1);\n  const [movies, setMovies] = useState(null); // Состояние для хранения\n\n  // Функция для выполнения запроса и обновления фотографий\n  const fetchAndSetMovies = async () => {\n    try {\n      setIsLoading(true); // Устанавливаем флаг загрузки в true\n      setError(null); // Сбрасываем сообщение об ошибке\n\n      const data = await fetchMovies(); // Выполняем запрос к API\n\n      const movies = data.results; // Получаем новые фильмы\n\n      setMovies(movies); // Устанавливаем обновленные фильмы\n      setError(null); // Сбрасываем сообщение об ошибке\n    } catch (error) {\n      setError(error.message); // Устанавливаем сообщение об ошибке\n      setMovies(null); // Сбрасываем фильмы в случае ошибки\n    } finally {\n      setIsLoading(false); // В любом случае завершаем запрос, сбрасывая флаг загрузки\n    }\n  };\n\n  useEffect(() => {\n    fetchAndSetMovies();\n  }, []);\n\n  const handleImageClick = event => {};\n\n  return (\n    <div>\n      {error !== null && (\n        <p className=\"errorBadge\">\n          Oops, some error occurred... Error message: {error}\n        </p>\n      )}\n\n      {isLoading && <Loader />}\n\n      <h2 className=\"pageTitle\"> Trending today </h2>\n      <MoviesList movies={movies} onClick={handleImageClick} />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"names":["fetchMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","concat","sent","console","log","abrupt","data","t0","stop","apply","arguments","id","poster_path","title","onClick","_jsxs","className","children","_jsx","src","alt","movies","map","movie","MovieItem","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","_useState5","_useState6","setMovies","fetchAndSetMovies","_movies","results","message","finish","useEffect","Loader","MoviesList","event"],"sourceRoot":""}