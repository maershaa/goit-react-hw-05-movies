{"version":3,"file":"static/js/836.05d03894.chunk.js","mappings":"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","sources":["components/GoBackBtn/StyledGoBackBtn.js","components/GoBackBtn/GoBackBtn.jsx","components/MoviesList/MovieItem/StylesdMovieListItem.js","components/MoviesList/MovieItem/MovieItem.jsx","components/MoviesList/StyledMovieList.js","components/MoviesList/MoviesList.jsx","components/api/getSearchMovie.js","components/SearchBox/StyledSearchBox.js","components/SearchBox/SearchBox.jsx","pages/Movies.jsx","refs/refs.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledGoBackBtn = styled.button`\n  cursor: pointer;\n  text-decoration: none;\n  background: rgb(3, 37, 65);\n  font-size: 18px;\n  color: #369baf;\n  padding: 10px;\n  margin-top: 15px;\n  margin-left: 10px;\n  margin-bottom: 20px;\n  display: inline-flex;\n  border: 1px solid #369baf;\n  border-radius: 10px;\n  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n    -webkit-transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    transform: scale(1.1); /* Измените масштаб по вашему усмотрению */\n    transition: transform 0.3s ease; /* Добавьте плавное переходное свойство */\n  }\n`;\n","import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { StyledGoBackBtn } from 'components/GoBackBtn/StyledGoBackBtn';\n\nconst GoBackBtn = () => {\n  const location = useLocation(); // Хук для получения объекта location из React Router\n  const navigate = useNavigate(); // Хук для навигации по маршрутам\n\n  // Функция для возврата на предыдущую страницу\n  const handleGoBack = () => {\n    if (location.state && location.state.from) {\n      navigate(location.state.from); // Возвращение на предыдущий маршрут\n    } else {\n      navigate('/'); // Возвращение на главную страницу по умолчанию\n    }\n  };\n\n  return (\n    <StyledGoBackBtn onClick={handleGoBack} className=\"backBtn\">\n      &#8617;\n    </StyledGoBackBtn>\n  );\n};\n\nexport default GoBackBtn;\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledMovieListItem = styled.li`\n  padding: 20px;\n  list-style: none;\n  display: flex;\n  flex-direction: row;\n\n  .itemContainer {\n    max-width: 50%;\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n\n  .moviePoster {\n    border-radius: 10px;\n  }\n`;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom'; // Импортируем useNavigate\nimport { StyledMovieListItem } from 'components/MoviesList/MovieItem/StylesdMovieListItem';\n\nconst MovieItem = ({ id, poster_path, title, overview, onClick }) => {\n  const navigate = useNavigate(); // Инициализируем useNavigate\n\n  const handleItemClick = () => {\n    // При нажатии на элемент списка фильмов, перенаправляем пользователя на страницу с деталями фильма\n    navigate(`/movies/${id}`);\n  };\n\n  return (\n    // Используем стилизованный компонент для элемента списка фильма\n    <StyledMovieListItem className=\"movieItem\" onClick={handleItemClick}>\n      {/* Отображаем постер фильма */}\n      <img\n        src={`https://image.tmdb.org/t/p/original${poster_path}`}\n        alt={title}\n        style={{ height: '260px' }}\n        className=\"moviePoster\"\n      />\n      {/* Контейнер для заголовка и описания фильма */}\n      <div className=\"itemContainer\">\n        <h3>{title}</h3>\n        <p className=\"overviewText\">{overview}</p>\n      </div>\n    </StyledMovieListItem>\n  );\n};\n\nexport default MovieItem;\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledMovieList = styled.ul``;\n","import React from 'react';\nimport MovieItem from 'components/MoviesList/MovieItem/MovieItem';\nimport { useNavigate } from 'react-router-dom';\nimport { StyledMovieList } from 'components/MoviesList/StyledMovieList';\n\n// Компонент для отображения списка фильмов\nconst MoviesList = ({ movies }) => {\n  // Хук навигации из React Router для перехода на другие страницы\n  const navigate = useNavigate();\n  const handleMovieClick = movieId => {\n    navigate(`/movies/${movieId}`);\n  };\n\n  return (\n    <StyledMovieList className=\"moviesList\">\n      {/* Проверка, что массив movies не является null или undefined */}\n      {movies &&\n        // Отображаем каждый элемент списка фильмов\n        movies.map(movie => (\n          <MovieItem\n            key={movie.id}\n            id={movie.id}\n            poster_path={movie.poster_path}\n            title={movie.title}\n            overview={movie.overview}\n            // Используем функцию для загрузки выбранного фильма при клике\n            onClick={() => handleMovieClick(movie.id)}\n          ></MovieItem>\n        ))}\n    </StyledMovieList>\n  );\n};\n\nexport default MoviesList;\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from 'refs/refs';\n\nconst getSearchMovie = async searchQuery => {\n  const resp = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`\n  );\n  const data = resp.data;\n\n  return data;\n};\n\nexport default getSearchMovie;\n","import styled from 'styled-components';\n\nexport const StyledSearchBox = styled.div`\n  background-image: linear-gradient(\n      to right,\n      rgba(3, 37, 65, 0.8) 0%,\n      rgba(3, 37, 65, 0) 100%\n    ),\n    url('https://www.themoviedb.org/t/p/w1920_and_h600_multi_faces_filter(duotone,00192f,00baff)/dKqa850uvbNSCaQCV4Im1XlzEtQ.jpg');\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-color: rgb(3, 37, 65);\n\n  padding-top: 40px;\n  padding-bottom: 40px;\n\n  .welcomeTitle {\n    padding: 15px;\n    margin: 0;\n    margin-bottom: 10px;\n    font-size: 48px;\n    font-weight: 700;\n    line-height: 1;\n  }\n  .welcomeText {\n    padding: 15px;\n\n    margin: 0;\n    margin-bottom: 10px;\n    font-size: 32px;\n    font-weight: 700;\n    line-height: 1;\n  }\n  .searchContainer {\n    position: relative;\n    display: inline-block;\n    width: 500px;\n  }\n\n  input[type='text'] {\n    margin-top: 15px;\n    margin-left: 10px;\n    margin-right: 10px;\n    margin-bottom: 20px;\n\n    width: 100%;\n    padding: 10px;\n\n    background: white;\n    font-size: 18px;\n    color: rgb(3, 37, 65);\n\n    border: 2px solid rgb(3, 37, 65);\n    border-radius: 40px;\n  }\n\n  .submitBtn {\n    position: absolute;\n    top: 47%;\n    right: -33px;\n    transform: translateY(-50%);\n\n    cursor: pointer;\n    text-decoration: none;\n    background: rgb(54, 155, 175);\n    font-size: 18px;\n    color: white;\n    padding: 10px;\n\n    display: inline-flex;\n    border: 1px solid rgb(54, 155, 175);\n    border-radius: 40px;\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n      box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n      -webkit-transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .submitBtn :hover,\n  .submitBtn :focus {\n    transform: scale(1.1); /* Измените масштаб по вашему усмотрению */\n    transition: transform 0.3s ease; /* Добавьте плавное переходное свойство */\n  }\n\n  .buttonLabel {\n    color: white;\n  }\n`;\n","import React from 'react';\nimport { StyledSearchBox } from 'components/SearchBox/StyledSearchBox';\n\nconst SearchBox = ({ onSearch, inputValue, setInputValue }) => {\n  // Обработчик изменения значения инпута\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  // Обработчик отправки формы\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!inputValue) {\n      alert('Please, enter film name');\n    }\n    // Вызываем функцию onSearch из родительского компонента для выполнения поиска\n    console.log('inputValue', inputValue);\n    onSearch(inputValue);\n  };\n\n  return (\n    <StyledSearchBox>\n      <h2 className=\"welcomeTitle\"> Welcome.</h2>\n      <h3 className=\"welcomeText\">\n        Millions of movies, series, and people. Explore now.\n      </h3>\n      <div className=\"searchContainer\">\n        <form className=\"searchForm\" onSubmit={handleSubmit}>\n          <input\n            className=\"input\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"search by film name\"\n            value={inputValue}\n            // Обновляем состояние при изменении значения инпута\n            onChange={handleInputChange}\n          />\n          <button type=\"submit\" className=\"submitBtn\">\n            <span className=\"buttonLabel\"> Search</span>\n          </button>\n        </form>\n      </div>\n    </StyledSearchBox>\n  );\n};\n\nexport default SearchBox;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport getSearchMovie from 'components/api/getSearchMovie'; // Используем функцию получения списка фильмов\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport Loader from 'components/Loader/Loader';\nimport GoBackBtn from 'components/GoBackBtn/GoBackBtn';\n\nconst Movies = () => {\n  const [isLoading, setIsLoading] = useState(false); // Состояние для отслеживания загрузки данных\n  const [error, setError] = useState(null); // Состояние для отслеживания ошибок\n  const [inputValue, setInputValue] = useState(''); // Состояние для хранения значения ввода поиска\n  const [movies, setMovies] = useState(null); // Состояние для хранения списка фильмов\n  const navigate = useNavigate(); // Хук для навигации по маршрутам\n  const [searchParams, setSearchParams] = useSearchParams(); // Хук для работы с параметрами строки запроса\n  const query = searchParams.get('query'); // Получаем значение параметра 'query'\n\n  // Функция для получения списка фильмов по поисковому запросу\n  const fetchMoviesBySearchQuery = async (queryValue, currentPage) => {\n    try {\n      setIsLoading(true); // Устанавливаем флаг загрузки в true перед запросом\n      setError(null); // Сбрасываем состояние ошибки перед запросом\n\n      const data = await getSearchMovie(queryValue); // Используем новую функцию getSearchMovie для запроса\n      console.log('Получены данные:', data);\n      setMovies(data.results); // Устанавливаем полученный список фильмов в состояние\n      setError(null); // Сбрасываем состояние ошибки\n    } catch (error) {\n      setError(error.message); // Устанавливаем сообщение об ошибке в состояние\n      setMovies(null); // Сбрасываем список фильмов в случае ошибки\n    } finally {\n      setIsLoading(false); // Устанавливаем флаг загрузки в false после завершения запроса\n    }\n  };\n\n  // useEffect для обработки изменения параметра запроса 'query'\n  useEffect(() => {\n    if (query) {\n      setInputValue(query); // Устанавливаем значение из параметра запроса в состояние ввода\n      fetchMoviesBySearchQuery(query, 1); // Вызов функции для получения фильмов при изменении запроса\n    }\n  }, [query]);\n\n  // Функция для обработки отправки поискового запроса\n  const handleSubmit = value => {\n    if (!value) return; // Если значение пустое, прекращаем выполнение\n\n    setInputValue(value); // Устанавливаем значение поискового запроса в состояние ввода\n    setSearchParams({ query: value }); // Записываем слово для поиска в параметры строки запроса\n\n    fetchMoviesBySearchQuery(value, 1); // Вызов функции для получения фильмов по запросу\n  };\n\n  // Функция для обработки нажатия на фильм и навигации к его странице\n  const handleMovieClick = movieId => {\n    navigate(`/movies/${movieId}`); // Переход на страницу фильма с указанным movieId\n  };\n\n  return (\n    <>\n      {/* Отображение сообщения об ошибке, если произошла ошибка */}\n      {error !== null && (\n        <p className=\"errorBadge\">\n          Oops, some error occurred... Error message: {error}\n        </p>\n      )}\n\n      {/* Отображение индикатора загрузки, если данные загружаются */}\n      {isLoading && <Loader />}\n\n      {/* Кнопка для возврата на предыдущую страницу */}\n      <GoBackBtn />\n\n      {/* Компонент SearchBox для ввода поискового запроса */}\n      <SearchBox\n        inputValue={inputValue}\n        setInputValue={setInputValue}\n        onSearch={handleSubmit}\n      />\n\n      {/* Отображение списка фильмов, если он не пуст и содержит более одного фильма */}\n      {movies && movies.length > 0 && (\n        <MoviesList movies={movies} onClick={handleMovieClick} />\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = 'c23a5d8272617f6f7021ba4c498464ff';\n"],"names":["StyledGoBackBtn","styled","_templateObject","_taggedTemplateLiteral","location","useLocation","navigate","useNavigate","_jsx","onClick","state","from","className","children","StyledMovieListItem","_ref","id","poster_path","title","overview","_jsxs","concat","src","alt","style","height","StyledMovieList","movies","map","movie","MovieItem","movieId","getSearchMovie","_asyncToGenerator","_regeneratorRuntime","_callee","searchQuery","resp","data","_context","prev","next","axios","BASE_URL","API_KEY","sent","abrupt","stop","_x","apply","arguments","StyledSearchBox","onSearch","inputValue","setInputValue","onSubmit","event","preventDefault","alert","console","log","type","autoComplete","autoFocus","placeholder","value","onChange","target","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","_useState5","_useState6","_useState7","_useState8","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","fetchMoviesBySearchQuery","queryValue","currentPage","results","t0","message","finish","_x2","useEffect","_Fragment","Loader","GoBackBtn","SearchBox","length","MoviesList"],"sourceRoot":""}