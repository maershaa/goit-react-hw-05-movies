{"version":3,"file":"static/js/186.4bfb3c30.chunk.js","mappings":"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","sources":["components/ActorsList/ActorItem/StyledActorItem.js","components/ActorsList/ActorItem/ActorItem.jsx","components/ActorsList/StyledActorsList.js","components/ActorsList/ActorsList.jsx","components/api/getCastMovie.js","pages/Cast.jsx","refs/refs.js"],"sourcesContent":["import styled from 'styled-components'; //npm install styled-components\nexport const StyledActorItem = styled.li`\n  padding: 10px;\n  width: 120px;\n  min-width: 120px;\n  /* height: 220x; */\n\n  color: black;\n\n  margin: 10px 4px 10px 10px;\n\n  /* border: 1px solid grey; */\n  padding-bottom: 10px;\n  border-radius: 10px;\n\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n\n  .text,\n  .actorsName {\n    display: block;\n    white-space: wrap;\n  }\n\n  .text {\n    font-size: 16px;\n  }\n\n  .actorsName {\n    font-size: 14px;\n  }\n\n  .imgActor {\n    border-radius: 10px;\n  }\n`;\n","import React from 'react';\nimport { StyledActorItem } from 'components/ActorsList/ActorItem/StyledActorItem';\n\nconst ActorItem = ({ id, profile_path, name, character }) => {\n  const imageUrl = profile_path\n    ? `https://www.themoviedb.org/t/p/w240_and_h266_face${profile_path}`\n    : 'https://lmm.in.ua/image/cache/catalog/image/cache/catalog/3/7/9/3796/1-650x650.webp'; //заглушка\n  console.log(imageUrl);\n\n  return (\n    <StyledActorItem className=\"actorItem\">\n      <img src={imageUrl} alt={name} width=\"264\" className=\"imgActor\" />\n      <h3 className=\"actorsName\"> {name}</h3>\n      <p className=\"text\"> {character}</p>\n    </StyledActorItem>\n  );\n};\n\nexport default ActorItem;\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledActorsList = styled.ul`\n  list-style: none;\n  width: 100%;\n  display: flex;\n  overflow-y: hidden;\n  overflow-x: scroll;\n  white-space: nowrap;\n  box-sizing: border-box;\n  padding: 15px 0; /* 15px сверху и снизу, 0 слева и справа */\n  gap: 10px;\n\n  background-image: url(https://www.themoviedb.org/assets/2/v4/misc/trending-bg-39afc2a5f77e31d469b25c187814c0a2efef225494c038098d62317d923f8415.svg);\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-color: white;\n  background-position: left;\n`;\n","import React from 'react';\nimport ActorItem from 'components/ActorsList/ActorItem/ActorItem';\nimport { StyledActorsList } from 'components/ActorsList/StyledActorsList';\n\nconst ActorsList = ({ actors }) => {\n  return (\n    <StyledActorsList className=\"actorsList\">\n      {actors.map(actor => (\n        <ActorItem\n          key={actor.id}\n          profile_path={actor.profile_path}\n          name={actor.name}\n          character={actor.character}\n        ></ActorItem>\n      ))}\n    </StyledActorsList>\n  );\n};\n\nexport default ActorsList;\n","import axios from 'axios'; //npm install axios\n\nimport { BASE_URL, API_KEY } from 'refs/refs';\n\nconst getCastMovie = async movieID => {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieID}/credits?api_key=${API_KEY}`\n  );\n  const data = resp.data;\n  return data;\n};\n\nexport default getCastMovie;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ActorsList from 'components/ActorsList/ActorsList';\nimport Loader from 'components/Loader/Loader'; //npm install react-loader-spinner --save\nimport getCastMovie from 'components/api/getCastMovie';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  // Состояние для отслеживания состояния загрузки\n  const [isLoading, setIsLoading] = useState(false);\n  // Состояние для обработки ошибок\n  const [error, setError] = useState(null);\n  const [actorsDetails, setActorsDetails] = useState(null);\n\n  const fetchActors = async id => {\n    try {\n      // Установить флаг загрузки в true перед запросом\n      setIsLoading(true);\n      // Сбросить состояние ошибки перед запросом\n      setError(null);\n      // Запрос к API для получения детальной информации о фильме по его ID\n      const data = await getCastMovie(id);\n      // Установка детальной информации о фильме в состояние\n      setActorsDetails(data);\n      console.log('actorsDetails.cast:', data.cast); // Добавляем вывод в консоль\n      // Сбросить состояние ошибки\n      setError(null);\n    } catch (error) {\n      // Установка состояния ошибки в случае ошибки\n      setError(error.message);\n      // Сбросить состояние деталей фильма в случае ошибки\n      setActorsDetails(null);\n    } finally {\n      // Установка флага загрузки в false в любом случае после завершения запроса, независимо от его успешности\n      setIsLoading(false);\n    }\n  };\n  // useEffect для выполнения запроса, когда компонент монтируется или изменяется movieId\n  useEffect(() => {\n    // Вызов функции fetchChosenMovie при изменении movieId\n    fetchActors(movieId);\n  }, [movieId]);\n\n  // Извлечение массива актеров и преобразование его в массив имен\n  return (\n    <div>\n      {error !== null && (\n        <p className=\"errorBadge\">\n          Oops, some error occurred... Error message: {error}\n        </p>\n      )}\n      {isLoading && <Loader />}\n      <h2> Cast </h2> {/* Cast = актерский состав */}\n      {actorsDetails !== null && <ActorsList actors={actorsDetails.cast} />}\n    </div>\n  );\n};\n\nexport default Cast;\n","export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = 'c23a5d8272617f6f7021ba4c498464ff';\n"],"names":["StyledActorItem","styled","_templateObject","_taggedTemplateLiteral","_ref","id","profile_path","name","character","imageUrl","concat","console","log","_jsxs","className","children","_jsx","src","alt","width","StyledActorsList","actors","map","actor","ActorItem","getCastMovie","_asyncToGenerator","_regeneratorRuntime","_callee","movieID","resp","data","_context","prev","next","axios","BASE_URL","API_KEY","sent","abrupt","stop","_x","apply","arguments","movieId","useParams","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","_useState5","_useState6","actorsDetails","setActorsDetails","fetchActors","cast","t0","message","finish","useEffect","Loader","ActorsList"],"sourceRoot":""}