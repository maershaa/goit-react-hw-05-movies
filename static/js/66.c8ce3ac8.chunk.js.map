{"version":3,"file":"static/js/66.c8ce3ac8.chunk.js","mappings":"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","sources":["components/GoBackBtn/StyledGoBackBtn.js","components/GoBackBtn/GoBackBtn.jsx","refs/refs.js","components/api/api.js","pages/StyledMovieDetails.js","pages/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledGoBackBtn = styled.button`\n  cursor: pointer;\n  text-decoration: none;\n  background: rgb(3, 37, 65);\n  font-size: 18px;\n  color: #369baf;\n  padding: 10px;\n  margin-top: 15px;\n  margin-left: 10px;\n  margin-bottom: 20px;\n  display: inline-flex;\n  border: 1px solid #369baf;\n  border-radius: 10px;\n  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n    -webkit-transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    transform: scale(1.1); /* Измените масштаб по вашему усмотрению */\n    transition: transform 0.3s ease; /* Добавьте плавное переходное свойство */\n  }\n`;\n","import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { StyledGoBackBtn } from 'components/GoBackBtn/StyledGoBackBtn';\n\nconst GoBackBtn = () => {\n  const location = useLocation(); // Хук для получения объекта location из React Router\n  const navigate = useNavigate(); // Хук для навигации по маршрутам\n\n  // Функция для возврата на предыдущую страницу\n  const handleGoBack = () => {\n    if (location.state && location.state.from) {\n      navigate(location.state.from); // Возвращение на предыдущий маршрут\n    } else {\n      navigate('/'); // Возвращение на главную страницу по умолчанию\n    }\n  };\n\n  return (\n    <StyledGoBackBtn onClick={handleGoBack} className=\"backBtn\">\n      &#8617;\n    </StyledGoBackBtn>\n  );\n};\n\nexport default GoBackBtn;\n","export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = 'c23a5d8272617f6f7021ba4c498464ff';\n","import axios from 'axios'; //npm install axios\n\nimport { BASE_URL, API_KEY } from 'refs/refs';\n\nexport const getTrendingFilm = async () => {\n  const resp = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n  const data = resp.data;\n\n  return data;\n};\n\nexport const getFilmById = async movieId => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    const data = resp.data;\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getSearchMovie = async searchQuery => {\n  const resp = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`\n  );\n  const data = resp.data;\n\n  return data;\n};\n\nexport const getReviewMovie = async movieID => {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieID}/reviews?api_key=${API_KEY}`\n  );\n  const data = resp.data;\n  return data;\n};\n\nexport const getCastMovie = async movieID => {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieID}/credits?api_key=${API_KEY}`\n  );\n  const data = resp.data;\n  return data;\n};\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledMovieDetails = styled.div`\n  .movieInfoContainer {\n    display: flex;\n    flex-direction: row;\n    padding: 20px;\n    column-gap: 40px;\n\n    border-bottom: 1px solid #369baf;\n    background-size: cover;\n    background-repeat: no-repeat;\n  }\n\n  .infoContainer {\n    max-width: 45%;\n    align-items: center;\n  }\n\n  .title {\n    font-size: 32px;\n    font-weight: 700;\n  }\n\n  .infoTitle {\n    font-size: 24px;\n    font-weight: 700;\n  }\n\n  .slogan {\n    font-style: italic;\n  }\n\n  .genresList {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    column-gap: 8px;\n\n    list-style: none;\n\n    padding: 0;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams, Outlet } from 'react-router-dom';\n// import Cast from 'pages/Cast';\n// import Reviews from 'pages/Reviews';\nimport { getFilmById } from 'components/api/api.js';\nimport Loader from 'components/Loader/Loader'; //npm install react-loader-spinner --save\nimport GoBackBtn from 'components/GoBackBtn/GoBackBtn';\n\nimport { StyledMovieDetails } from 'pages/StyledMovieDetails';\nconst MovieDetails = () => {\n  // Извлечение movieId из параметров URL\n  const { movieId } = useParams();\n  // Состояние для хранения детальной информации о фильме\n  const [movieDetails, setMovieDetails] = useState(null);\n  // Состояние для отслеживания состояния загрузки\n  const [isLoading, setIsLoading] = useState(false);\n  // Состояние для обработки ошибок\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Функция для запроса детальной информации о выбранном фильме\n    const fetchChosenMovie = async id => {\n      try {\n        // Установить флаг загрузки в true перед запросом\n        setIsLoading(true);\n        // Сбросить состояние ошибки перед запросом\n        setError(null);\n\n        const movieData = await getFilmById(movieId); // Вызываем функцию с movieId\n        setMovieDetails(movieData); // Устанавливаем полученные данные в состояние\n        setError(null);\n\n        setError(null);\n      } catch (error) {\n        // Установка состояния ошибки в случае ошибки\n        setError(error.message);\n        // Сбросить состояние деталей фильма в случае ошибки\n        setMovieDetails(null);\n      } finally {\n        // Установка флага загрузки в false в любом случае после завершения запроса, независимо от его успешности\n        setIsLoading(false);\n      }\n    };\n    fetchChosenMovie(); // Вызываем функцию при монтировании компонента и изменении movieId\n  }, [movieId]);\n\n  // !!!!Проверка, есть ли данные в movieDetails перед их отображением  КАК РЕАЛИЗОВАТЬ ИНАЧЕ?\n  if (!movieDetails) {\n    return;\n  }\n\n  // Деструктуризация данных из movieDetails\n  const {\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    poster_path,\n    backdrop_path,\n    runtime,\n    tagline,\n  } = movieDetails;\n\n  // Создаем стиль для фона, используя линейный градиент и изображение фона из API\n  const backgroundImageStyles = {\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(https://www.themoviedb.org/t/p/w1920_and_h800_multi_faces${backdrop_path})`,\n  };\n\n  // Функция для округления рейтинга до одной десятой\n  const calculateRoundedRating = rating => {\n    const numericRating = Number(rating);\n    return numericRating.toFixed(1);\n  };\n\n  // Функция для расчета продолжительности фильма в часах и минутах\n  const calculateRuntime = runtime => {\n    const numericRuntime = Number(runtime);\n    const hours = Math.floor(numericRuntime / 60);\n    const minutes = numericRuntime % 60;\n    return { hours, minutes };\n  };\n\n  // Функция для извлечения года из даты выпуска фильма\n  const extractReleaseYear = releaseDate => {\n    return new Date(releaseDate).getFullYear();\n  };\n\n  // Расчет округленного рейтинга на основе полученного рейтинга из API\n  const roundedRating = calculateRoundedRating(vote_average);\n\n  // Расчет продолжительности фильма в часах и минутах на основе полученных данных из API\n  const { hours, minutes } = calculateRuntime(runtime);\n\n  // Извлечение года выпуска фильма из даты, полученной из API\n  const releaseYear = extractReleaseYear(release_date);\n\n  return (\n    <StyledMovieDetails>\n      {error !== null && (\n        <p className=\"errorBadge\">\n          Oops, some error occurred... Error message: {error}\n        </p>\n      )}\n      {isLoading && <Loader />}\n      <GoBackBtn></GoBackBtn>\n      <h1> Movie Id: {movieId}</h1> {/* !Заглушка для проверки movieId */}\n      <div className=\"movieInfoContainer\" style={backgroundImageStyles}>\n        {/* Отображаем постер фильма */}\n        <img\n          src={`https://image.tmdb.org/t/p/original${poster_path}`}\n          alt={title}\n          style={{ height: '460px' }}\n        />\n\n        <div className=\"infoContainer\">\n          <h2 className=\"title\">\n            {title} ( {releaseYear})\n          </h2>\n\n          <p className=\"slogan\">{tagline}</p>\n          <p>\n            Rating: {roundedRating} &bull; Duration: {`${hours}h ${minutes}m`}\n          </p>\n          <h3 className=\"infoTitle\">Overview</h3>\n          <p>{overview}</p>\n\n          <h3 className=\"infoTitle\">Genres</h3>\n          <ul className=\"genresList\">\n            {genres.map(genre => (\n              <li key={genre.id}>{genre.name.toLowerCase()}</li>\n            ))}\n          </ul>\n          <h3>Additional Information</h3>\n          <ul>\n            <li>\n              <Link className=\"header-link\" to=\"cast\">\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link className=\"header-link\" to=\"reviews\">\n                Reviews\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <Outlet />\n    </StyledMovieDetails>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["StyledGoBackBtn","styled","_templateObject","_taggedTemplateLiteral","location","useLocation","navigate","useNavigate","_jsx","onClick","state","from","className","children","BASE_URL","API_KEY","getTrendingFilm","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","resp","data","_context","prev","next","axios","concat","sent","abrupt","stop","apply","arguments","getFilmById","_ref2","_callee2","movieId","_context2","t0","_x","getSearchMovie","_ref3","_callee3","searchQuery","_context3","_x2","getReviewMovie","_ref4","_callee4","movieID","_context4","_x3","getCastMovie","_ref5","_callee5","_context5","_x4","StyledMovieDetails","useParams","_useState","useState","_useState2","_slicedToArray","movieDetails","setMovieDetails","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","fetchChosenMovie","id","movieData","message","finish","title","release_date","vote_average","overview","genres","poster_path","backdrop_path","runtime","tagline","backgroundImageStyles","backgroundImage","roundedRating","Number","toFixed","_calculateRuntime","numericRuntime","hours","Math","floor","minutes","calculateRuntime","releaseYear","Date","getFullYear","_jsxs","Loader","GoBackBtn","style","src","alt","height","map","genre","name","toLowerCase","Link","to","Outlet"],"sourceRoot":""}