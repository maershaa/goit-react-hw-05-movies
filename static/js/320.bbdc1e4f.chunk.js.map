{"version":3,"file":"static/js/320.bbdc1e4f.chunk.js","mappings":"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","sources":["components/api/api.js","components/ActorsList/ActorItem/StyledActorItem.js","components/ActorsList/ActorItem/ActorItem.jsx","components/ActorsList/StyledActorsList.js","components/ActorsList/ActorsList.jsx","pages/Cast.jsx"],"sourcesContent":["import axios from 'axios'; //npm install axios\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c23a5d8272617f6f7021ba4c498464ff';\n\nconst fetchMovies = async (endpoint, options = {}) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}${endpoint}?api_key=${API_KEY}`,\n      options\n    );\n    console.log('response in api', response);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default fetchMovies;\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledActorItem = styled.li`\n  padding: 10px;\n  width: 120px;\n  min-width: 120px;\n  /* height: 220x; */\n\n  color: black;\n\n  margin: 10px 4px 10px 10px;\n\n  /* border: 1px solid grey; */\n  padding-bottom: 10px;\n  border-radius: 10px;\n\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n\n  .text,\n  .actorsName {\n    display: block;\n    white-space: wrap;\n  }\n\n  .text {\n    font-size: 16px;\n  }\n\n  .actorsName {\n    font-size: 14px;\n  }\n\n  .imgActor {\n    border-radius: 10px;\n  }\n`;\n","import React from 'react';\nimport { StyledActorItem } from 'components/ActorsList/ActorItem/StyledActorItem';\n\nconst ActorItem = ({ id, profile_path, name, character }) => {\n  const imageUrl = profile_path\n    ? `https://www.themoviedb.org/t/p/w240_and_h266_face${profile_path}`\n    : 'https://lmm.in.ua/image/cache/catalog/image/cache/catalog/3/7/9/3796/1-650x650.webp'; //заглушка\n  console.log(imageUrl);\n\n  return (\n    <StyledActorItem className=\"actorItem\">\n      <img src={imageUrl} alt={name} width=\"264\" className=\"imgActor\" />\n      <h3 className=\"actorsName\"> {name}</h3>\n      <p className=\"text\"> {character}</p>\n    </StyledActorItem>\n  );\n};\n\nexport default ActorItem;\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledActorsList = styled.ul`\n  list-style: none;\n  width: 100%;\n  display: flex;\n  overflow-y: hidden;\n  overflow-x: scroll;\n  white-space: nowrap;\n  box-sizing: border-box;\n  padding: 15px 0; /* 15px сверху и снизу, 0 слева и справа */\n  gap: 10px;\n\n  background-image: url(https://www.themoviedb.org/assets/2/v4/misc/trending-bg-39afc2a5f77e31d469b25c187814c0a2efef225494c038098d62317d923f8415.svg);\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-color: white;\n  background-position: left;\n`;\n","import React from 'react';\nimport ActorItem from 'components/ActorsList/ActorItem/ActorItem';\nimport { StyledActorsList } from 'components/ActorsList/StyledActorsList';\n\nconst ActorsList = ({ actors }) => {\n  return (\n    <StyledActorsList className=\"actorsList\">\n      {actors.map(actor => (\n        <ActorItem\n          key={actor.id}\n          profile_path={actor.profile_path}\n          name={actor.name}\n          character={actor.character}\n        ></ActorItem>\n      ))}\n    </StyledActorsList>\n  );\n};\n\nexport default ActorsList;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ActorsList from 'components/ActorsList/ActorsList';\nimport Loader from 'components/Loader/Loader'; //npm install react-loader-spinner --save\nimport fetchMovies from 'components/api/api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  // Состояние для отслеживания состояния загрузки\n  const [isLoading, setIsLoading] = useState(false);\n  // Состояние для обработки ошибок\n  const [error, setError] = useState(null);\n  const [actorsDetails, setActorsDetails] = useState(null);\n\n  //   useEffect(() => {\n  //     if (!movieId) return;\n  //   }, [movieId]);\n\n  const fetchActors = async id => {\n    try {\n      // Установить флаг загрузки в true перед запросом\n      setIsLoading(true);\n      // Сбросить состояние ошибки перед запросом\n      setError(null);\n      // Запрос к API для получения детальной информации о фильме по его ID\n      const data = await fetchMovies(\n        `movie/${id}/credits`,\n        // fetch('https://api.themoviedb.org/3/movie/872585/credits?language=en-US', options)\n        {\n          language: 'en-US',\n        }\n      );\n      // Установка детальной информации о фильме в состояние\n      setActorsDetails(data);\n      console.log('actorsDetails.cast:', data.cast); // Добавляем вывод в консоль\n      // Сбросить состояние ошибки\n      setError(null);\n    } catch (error) {\n      // Установка состояния ошибки в случае ошибки\n      setError(error.message);\n      // Сбросить состояние деталей фильма в случае ошибки\n      setActorsDetails(null);\n    } finally {\n      // Установка флага загрузки в false в любом случае после завершения запроса, независимо от его успешности\n      setIsLoading(false);\n    }\n  };\n  // useEffect для выполнения запроса, когда компонент монтируется или изменяется movieId\n  useEffect(() => {\n    // Вызов функции fetchChosenMovie при изменении movieId\n    fetchActors(movieId);\n  }, [movieId]);\n\n  // Извлечение массива актеров и преобразование его в массив имен\n  return (\n    <div>\n      {error !== null && (\n        <p className=\"errorBadge\">\n          Oops, some error occurred... Error message: {error}\n        </p>\n      )}\n      {isLoading && <Loader />}\n      <h2> Cast </h2> {/* Cast = актерский состав */}\n      {actorsDetails !== null && <ActorsList actors={actorsDetails.cast} />}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","fetchMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","endpoint","options","response","_args","arguments","_context","prev","next","length","undefined","axios","concat","sent","console","log","abrupt","data","t0","stop","_x","apply","StyledActorItem","styled","_templateObject","_taggedTemplateLiteral","id","profile_path","name","character","imageUrl","_jsxs","className","children","_jsx","src","alt","width","StyledActorsList","actors","map","actor","ActorItem","movieId","useParams","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","_useState5","_useState6","actorsDetails","setActorsDetails","fetchActors","language","cast","message","finish","useEffect","Loader","ActorsList"],"sourceRoot":""}