{"version":3,"file":"static/js/134.47a4a26c.chunk.js","mappings":"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","sources":["components/api/api.js","pages/Movies.jsx","pages/StyledMovieDetails.js"],"sourcesContent":["import axios from 'axios'; //npm install axios\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c23a5d8272617f6f7021ba4c498464ff';\n\nconst fetchMovies = async (endpoint, options = {}) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}${endpoint}?api_key=${API_KEY}`,\n      options\n    );\n    console.log('response in api', response);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default fetchMovies;\n","import React, { useState, useEffect } from 'react';\nimport { Link, useLocation, useParams, Outlet } from 'react-router-dom';\nimport fetchMovies from 'components/api/api';\nimport Loader from 'components/Loader/Loader'; //npm install react-loader-spinner --save\nimport { StyledMovieDetails } from 'pages/StyledMovieDetails';\nconst Movies = () => {\n  // Состояние для отслеживания состояния загрузки\n  const [isLoading, setIsLoading] = useState(false);\n  // Состояние для обработки ошибок\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  // Состояние для хранения детальной информации о фильме\n  const [movieDetails, setMovieDetails] = useState(null);\n\n  // Получение объекта location из React Router\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!movieId) return;\n  }, [movieId]);\n\n  const [inputValue, setInputValue] = useState('');\n\n  // Обработчик изменения значения инпута\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  // Обработчик отправки формы\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!inputValue) {\n      alert('Please, enter film name');\n    }\n    // Вызываем функцию onSearch из родительского компонента для выполнения поиска\n    onSearch(inputValue);\n  };\n\n  const onSearch = handleSubmit;\n\n  // !!тут и в MovieDetails идентичные запросы на апи\n  const fetchChosenMovie = async id => {\n    try {\n      // Установить флаг загрузки в true перед запросом\n      setIsLoading(true);\n      // Сбросить состояние ошибки перед запросом\n      setError(null);\n      // Запрос к API для получения детальной информации о фильме по его ID\n      const data = await fetchMovies(\n        `movie/${id}/`,\n        // fetch('https://api.themoviedb.org/3/search/movie?query=872585&include_adult=false&language=en-US&page=1', options)\n        {\n          params: {\n            language: 'en-US',\n          },\n        }\n      );\n      // Установка детальной информации о фильме в состояние\n      setMovieDetails(data);\n      console.log('setMovieDetails', data);\n      // Сбросить состояние ошибки\n      setError(null);\n    } catch (error) {\n      // Установка состояния ошибки в случае ошибки\n      setError(error.message);\n      // Сбросить состояние деталей фильма в случае ошибки\n      setMovieDetails(null);\n    } finally {\n      // Установка флага загрузки в false в любом случае после завершения запроса, независимо от его успешности\n      setIsLoading(false);\n    }\n  };\n  // useEffect для выполнения запроса, когда компонент монтируется или изменяется movieId\n  useEffect(() => {\n    // Вызов функции fetchChosenMovie при изменении movieId\n    fetchChosenMovie(movieId);\n  }, [movieId]);\n\n  // Функция для возврата на предыдущую страницу\n  const handleGoBack = () => {\n    if (location.state && location.state.from) {\n      // Вернуться на предыдущий маршрут, если возможно\n      window.location.href = location.state.from;\n    } else {\n      // Вернуться на дефолтный маршрут, если информация о предыдущем местоположении отсутствует\n      window.location.href = '/';\n    }\n  };\n\n  // Деструктуризация данных из movieDetails\n  const {\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    poster_path,\n    backdrop_path,\n    runtime,\n    tagline,\n  } = movieDetails;\n\n  // Создаем стиль для фона, используя линейный градиент и изображение фона из API\n  const backgroundImageStyles = {\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(https://www.themoviedb.org/t/p/w1920_and_h800_multi_faces${backdrop_path})`,\n  };\n\n  // Функция для округления рейтинга до одной десятой\n  const calculateRoundedRating = rating => {\n    const numericRating = Number(rating);\n    return numericRating.toFixed(1);\n  };\n\n  // Функция для расчета продолжительности фильма в часах и минутах\n  const calculateRuntime = runtime => {\n    const numericRuntime = Number(runtime);\n    const hours = Math.floor(numericRuntime / 60);\n    const minutes = numericRuntime % 60;\n    return { hours, minutes };\n  };\n\n  // Функция для извлечения года из даты выпуска фильма\n  const extractReleaseYear = releaseDate => {\n    return new Date(releaseDate).getFullYear();\n  };\n\n  // Расчет округленного рейтинга на основе полученного рейтинга из API\n  const roundedRating = calculateRoundedRating(vote_average);\n\n  // Расчет продолжительности фильма в часах и минутах на основе полученных данных из API\n  const { hours, minutes } = calculateRuntime(runtime);\n\n  // Извлечение года выпуска фильма из даты, полученной из API\n  const releaseYear = extractReleaseYear(release_date);\n  return (\n    <div>\n      <form className=\"searchForm\" onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"button\">\n          <span className=\"buttonLabel\"> Search</span>\n        </button>\n        <input\n          className=\"input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"search by film name\"\n          value={inputValue}\n          // Обновляем состояние при изменении значения инпута\n          onChange={handleInputChange}\n        />\n      </form>\n      {/* Проверяем, есть ли данные в movieDetails перед их отображением */}\n      {movieDetails !== null && (\n        <StyledMovieDetails>\n          {error !== null && (\n            <p className=\"errorBadge\">\n              Oops, some error occurred... Error message: {error}\n            </p>\n          )}\n          {isLoading && <Loader />}\n          <h1> Movie Id: {movieId}</h1> {/* !Заглушка для проверки movieId */}\n          <button onClick={handleGoBack} className=\"backBtn\">\n            Назад\n          </button>\n          <div className=\"movieInfoContainer\" style={backgroundImageStyles}>\n            {/* Отображаем постер фильма */}\n            <img\n              src={`https://image.tmdb.org/t/p/original${poster_path}`}\n              alt={title}\n              style={{ height: '460px' }}\n            />\n\n            <div className=\"infoContainer\">\n              <h2 className=\"title\">\n                {title} ( {releaseYear})\n              </h2>\n\n              <p className=\"slogan\">{tagline}</p>\n              <p>\n                Rating: {roundedRating} &bull; Duration:{' '}\n                {`${hours}h ${minutes}m`}\n              </p>\n              <h3 className=\"infoTitle\">Overview</h3>\n              <p>{overview}</p>\n\n              <h3 className=\"infoTitle\">Genres</h3>\n              <ul className=\"genresList\">\n                {genres.map(genre => (\n                  <li key={genre.id}>{genre.name.toLowerCase()}</li>\n                ))}\n              </ul>\n              <h3>Additional Information</h3>\n              <ul>\n                <li>\n                  <Link className=\"header-link\" to=\"cast\">\n                    Cast\n                  </Link>\n                </li>\n                <li>\n                  <Link className=\"header-link\" to=\"reviews\">\n                    Reviews\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <Outlet />\n        </StyledMovieDetails>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledMovieDetails = styled.div`\n  .movieInfoContainer {\n    display: flex;\n    flex-direction: row;\n    padding: 20px;\n    column-gap: 40px;\n\n    border-bottom: 1px solid #369baf;\n    background-size: cover;\n    background-repeat: no-repeat;\n  }\n\n  .infoContainer {\n    max-width: 45%;\n    align-items: center;\n  }\n\n  .title {\n    font-size: 32px;\n    font-weight: 700;\n  }\n\n  .infoTitle {\n    font-size: 24px;\n    font-weight: 700;\n  }\n\n  .slogan {\n    font-style: italic;\n  }\n\n  .backBtn {\n    cursor: pointer;\n    text-decoration: none;\n    background: #373b44; /* fallback for old browsers */\n    background: -webkit-linear-gradient(\n      to right,\n      #4286f4,\n      #373b44\n    ); /* Chrome 10-25, Safari 5.1-6 */\n    background: linear-gradient(\n      112.1deg,\n      rgb(32, 38, 57) 11.4%,\n      rgb(63, 76, 119) 70.2%\n    );\n    font-size: 18px;\n    color: white;\n    padding: 15px;\n    margin-left: 20px;\n    margin-bottom: 20px;\n    display: inline-flex;\n    border: 1px solid #373b44;\n    border-radius: 10px;\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n      box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n      -webkit-transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .backBtn:hover,\n  .backBtn:focus {\n    cursor: pointer;\n    transform: scale(1.1); /* Измените масштаб по вашему усмотрению */\n    transition: transform 0.3s ease; /* Добавьте плавное переходное свойство */\n  }\n\n  .genresList {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    column-gap: 8px;\n\n    list-style: none;\n\n    padding: 0;\n  }\n`;\n"],"names":["BASE_URL","API_KEY","fetchMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","endpoint","options","response","_args","arguments","_context","prev","next","length","undefined","axios","concat","sent","console","log","abrupt","data","t0","stop","_x","apply","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","movieId","useParams","_useState5","_useState6","movieDetails","setMovieDetails","location","useLocation","useEffect","_useState7","_useState8","inputValue","setInputValue","handleSubmit","event","preventDefault","alert","onSearch","fetchChosenMovie","id","params","language","message","finish","title","release_date","vote_average","overview","genres","poster_path","backdrop_path","runtime","tagline","backgroundImageStyles","backgroundImage","roundedRating","Number","toFixed","_calculateRuntime","numericRuntime","hours","Math","floor","minutes","calculateRuntime","releaseYear","Date","getFullYear","_jsxs","children","className","onSubmit","_jsx","type","autoComplete","autoFocus","placeholder","value","onChange","target","StyledMovieDetails","Loader","onClick","state","from","window","href","style","src","alt","height","map","genre","name","toLowerCase","Link","to","Outlet","styled","_templateObject","_taggedTemplateLiteral"],"sourceRoot":""}