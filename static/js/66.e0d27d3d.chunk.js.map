{"version":3,"file":"static/js/66.e0d27d3d.chunk.js","mappings":"6KAEMA,EAAW,gCACXC,EAAU,mCAeVC,EAAW,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAOC,GAAQ,IAAAC,EAAAC,EAAAC,EAAAC,UAAA,OAAAN,IAAAA,MAAA,SAAAO,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAc,OAAZN,EAAOE,EAAAK,OAAA,QAAAC,IAAAN,EAAA,GAAAA,EAAA,GAAG,CAAC,EAACE,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEtBG,EAAAA,EAAAA,IAAU,GAADC,OAC3BlB,GAAQkB,OAAGX,EAAQ,aAAAW,OAAYjB,GAClCO,GACA,KAAD,EACwC,OAJnCC,EAAQG,EAAAO,KAIdC,QAAQC,IAAI,kBAAmBZ,GAAUG,EAAAU,OAAA,SAClCb,EAASc,MAAI,aAAAX,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,SAAAA,EAAAY,GAAC,KAAD,oBAAAZ,EAAAa,OAAA,GAAAnB,EAAA,kBAIvB,gBAXgBoB,GAAA,OAAAvB,EAAAwB,MAAA,KAAAhB,UAAA,KAajB,K,mOC9BaiB,E,OAAqBC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,w5D,SCuL5C,EA1KqB,WAEnB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAGRE,GAAwCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAEpCI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAGhBG,GAAWC,EAAAA,EAAAA,MAcXC,EAAgB,eAAA/C,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAM6C,GAAE,IAAA5B,EAAA,OAAAlB,IAAAA,MAAA,SAAAO,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAO7B,OAP6BF,EAAAC,KAAA,EAG7B8B,GAAa,GAEbI,EAAS,MAETnC,EAAAE,KAAA,GACmBZ,EAAAA,EAAAA,GAAY,SAADgB,OAAUiC,GAAM,CAC5CC,OAAQ,CACNC,SAAU,WAEX,KAAD,EAJI9B,EAAIX,EAAAO,KAOVoB,EAAgBhB,GAEhBwB,EAAS,MAAMnC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,SAGfmC,EAASnC,EAAAY,GAAM8B,SAEff,EAAgB,MAAM,QAGF,OAHE3B,EAAAC,KAAA,GAGtB8B,GAAa,GAAO/B,EAAA2C,OAAA,6BAAA3C,EAAAa,OAAA,GAAAnB,EAAA,yBAEvB,gBA3BqBoB,GAAA,OAAAvB,EAAAwB,MAAA,KAAAhB,UAAA,KAoCtB,IANA6C,EAAAA,EAAAA,YAAU,WAERN,EAAiBlB,EACnB,GAAG,CAACA,KAGCM,EACH,OAAOmB,EAAAA,EAAAA,KAAA,KAAAC,SAAG,eAIZ,IACEC,EASErB,EATFqB,MACAC,EAQEtB,EARFsB,aACAC,EAOEvB,EAPFuB,aACAC,EAMExB,EANFwB,SACAC,EAKEzB,EALFyB,OACAC,EAIE1B,EAJF0B,YACAC,EAGE3B,EAHF2B,cACAC,EAEE5B,EAFF4B,QACAC,EACE7B,EADF6B,QAIIC,EAAwB,CAC5BC,gBAAgB,yHAADnD,OAA2H+C,EAAa,MAuBnJK,EAlBkBC,OAkBqBV,GAjBtBW,QAAQ,GAoB/BC,EAhByB,SAAAP,GACvB,IAAMQ,EAAiBH,OAAOL,GAG9B,MAAO,CAAES,MAFKC,KAAKC,MAAMH,EAAiB,IAE1BI,QADAJ,EAAiB,GAEnC,CAW2BK,CAAiBb,GAApCS,EAAKF,EAALE,MAAOG,EAAOL,EAAPK,QAGTE,EAVG,IAAIC,KAU0BrB,GAVRsB,cAY/B,OACEC,EAAAA,EAAAA,MAACvD,EAAkB,CAAA8B,SAAA,CACN,OAAVZ,IACCqC,EAAAA,EAAAA,MAAA,KAAGC,UAAU,aAAY1B,SAAA,CAAC,+CACqBZ,KAGhDJ,IAAae,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,KACrBF,EAAAA,EAAAA,MAAA,MAAAzB,SAAA,CAAI,cAAY1B,KAAa,KAC7ByB,EAAAA,EAAAA,KAAA,UAAQ6B,QA1GS,WACftC,EAASuC,OAASvC,EAASuC,MAAMC,KAEnCC,OAAOzC,SAAS0C,KAAO1C,EAASuC,MAAMC,KAGtCC,OAAOzC,SAAS0C,KAAO,GAE3B,EAkGmCN,UAAU,UAAS1B,SAAC,oCAGnDyB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAqBO,MAAOvB,EAAsBV,SAAA,EAE/DD,EAAAA,EAAAA,KAAA,OACEmC,IAAG,sCAAA1E,OAAwC8C,GAC3C6B,IAAKlC,EACLgC,MAAO,CAAEG,OAAQ,YAGnBX,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAe1B,SAAA,EAC5ByB,EAAAA,EAAAA,MAAA,MAAIC,UAAU,QAAO1B,SAAA,CAClBC,EAAM,MAAIqB,EAAY,QAGzBvB,EAAAA,EAAAA,KAAA,SAEAA,EAAAA,EAAAA,KAAA,KAAG2B,UAAU,SAAQ1B,SAAES,KACvBgB,EAAAA,EAAAA,MAAA,KAAAzB,SAAA,CAAG,WACQY,EAAc,qBAAkB,GAAApD,OAAIyD,EAAK,MAAAzD,OAAK4D,EAAO,SAEhErB,EAAAA,EAAAA,KAAA,MAAI2B,UAAU,YAAW1B,SAAC,cAC1BD,EAAAA,EAAAA,KAAA,KAAAC,SAAII,KAEJL,EAAAA,EAAAA,KAAA,MAAI2B,UAAU,YAAW1B,SAAC,YAC1BD,EAAAA,EAAAA,KAAA,MAAI2B,UAAU,aAAY1B,SACvBK,EAAOgC,KAAI,SAAAC,GAAK,OACfvC,EAAAA,EAAAA,KAAA,MAAAC,SAAoBsC,EAAMC,KAAKC,eAAtBF,EAAM7C,GAAmC,OAGtDM,EAAAA,EAAAA,KAAA,MAAAC,SAAI,4BACJyB,EAAAA,EAAAA,MAAA,MAAAzB,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,UACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,gBAEND,EAAAA,EAAAA,KAAC0C,EAAAA,GAAO,CAACf,UAAU,cAAcgB,GAAG,OAAM1C,SAAC,0CAG3CyB,EAAAA,EAAAA,MAACkB,EAAAA,GAAM,CAAA3C,SAAA,EACLD,EAAAA,EAAAA,KAAC6C,EAAAA,GAAK,CAACC,KAAK,OAAOC,SAAS/C,EAAAA,EAAAA,KAACgD,IAAI,OACjChD,EAAAA,EAAAA,KAAC6C,EAAAA,GAAK,CAACC,KAAK,UAAUC,SAAS/C,EAAAA,EAAAA,KAACiD,IAAO,iBAMnD,C","sources":["components/api/api.js","pages/StyledMovieDetails.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios'; //npm install axios\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c23a5d8272617f6f7021ba4c498464ff';\n\n// const fetchMovies = async () => {\n//   try {\n//     const response = await axios.get(\n//       // Получение списка популярных фильмов за неделю\n//       `${BASE_URL}trending/all/week?api_key=${API_KEY}`\n//     );\n//     console.log('response in api', response);\n//     return response.data;\n//   } catch (error) {\n//     throw error;\n//   }\n// };\n\nconst fetchMovies = async (endpoint, options = {}) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}${endpoint}?api_key=${API_KEY}`,\n      options\n    );\n    console.log('response in api', response);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default fetchMovies;\n","import styled from 'styled-components'; //npm install styled-components\nexport const StyledMovieDetails = styled.div`\n  .movieInfoContainer {\n    display: flex;\n    flex-direction: row;\n    padding: 20px;\n    column-gap: 40px;\n\n    border-bottom: 1px solid #369baf;\n    background-size: cover;\n    background-repeat: no-repeat;\n  }\n\n  .infoContainer {\n    max-width: 45%;\n    align-items: center;\n  }\n\n  .title {\n    font-size: 32px;\n    font-weight: 700;\n  }\n\n  .infoTitle {\n    font-size: 24px;\n    font-weight: 700;\n  }\n\n  .slogan {\n    font-style: italic;\n  }\n\n  .backBtn {\n    cursor: pointer;\n    text-decoration: none;\n    background: #373b44; /* fallback for old browsers */\n    background: -webkit-linear-gradient(\n      to right,\n      #4286f4,\n      #373b44\n    ); /* Chrome 10-25, Safari 5.1-6 */\n    background: linear-gradient(\n      112.1deg,\n      rgb(32, 38, 57) 11.4%,\n      rgb(63, 76, 119) 70.2%\n    );\n    font-size: 18px;\n    color: white;\n    padding: 15px;\n    margin-left: 20px;\n    margin-bottom: 20px;\n    display: inline-flex;\n    border: 1px solid #373b44;\n    border-radius: 10px;\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n      box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n      -webkit-transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .backBtn:hover,\n  .backBtn:focus {\n    cursor: pointer;\n    transform: scale(1.1); /* Измените масштаб по вашему усмотрению */\n    transition: transform 0.3s ease; /* Добавьте плавное переходное свойство */\n  }\n\n  .genresList {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    column-gap: 8px;\n\n    list-style: none;\n\n    padding: 0;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport {\n  NavLink,\n  Route,\n  Routes,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\nimport Cast from 'pages/Cast';\nimport Reviews from 'pages/Reviews';\nimport fetchMovies from 'components/api/api';\nimport Loader from 'components/Loader/Loader'; //npm install react-loader-spinner --save\n\nimport { StyledMovieDetails } from 'pages/StyledMovieDetails';\nconst MovieDetails = () => {\n  // Извлечение movieId из параметров URL\n  const { movieId } = useParams();\n\n  // Состояние для хранения детальной информации о фильме\n  const [movieDetails, setMovieDetails] = useState(null);\n  // Состояние для отслеживания состояния загрузки\n  const [isLoading, setIsLoading] = useState(false);\n  // Состояние для обработки ошибок\n  const [error, setError] = useState(null);\n\n  // Получение объекта location из React Router\n  const location = useLocation();\n\n  // Функция для возврата на предыдущую страницу\n  const handleGoBack = () => {\n    if (location.state && location.state.from) {\n      // Вернуться на предыдущий маршрут, если возможно\n      window.location.href = location.state.from;\n    } else {\n      // Вернуться на дефолтный маршрут, если информация о предыдущем местоположении отсутствует\n      window.location.href = '/';\n    }\n  };\n\n  // Функция для запроса детальной информации о выбранном фильме\n  const fetchChosenMovie = async id => {\n    try {\n      // Установить флаг загрузки в true перед запросом\n      setIsLoading(true);\n      // Сбросить состояние ошибки перед запросом\n      setError(null);\n\n      // Запрос к API для получения детальной информации о фильме по его ID\n      const data = await fetchMovies(`movie/${id}`, {\n        params: {\n          language: 'en-US',\n        },\n      });\n\n      // Установка детальной информации о фильме в состояние\n      setMovieDetails(data);\n      // Сбросить состояние ошибки\n      setError(null);\n    } catch (error) {\n      // Установка состояния ошибки в случае ошибки\n      setError(error.message);\n      // Сбросить состояние деталей фильма в случае ошибки\n      setMovieDetails(null);\n    } finally {\n      // Установка флага загрузки в false в любом случае после завершения запроса, независимо от его успешности\n      setIsLoading(false);\n    }\n  };\n\n  // useEffect для выполнения запроса, когда компонент монтируется или изменяется movieId\n  useEffect(() => {\n    // Вызов функции fetchChosenMovie при изменении movieId\n    fetchChosenMovie(movieId);\n  }, [movieId]);\n\n  // Проверка, есть ли данные в movieDetails перед их отображением\n  if (!movieDetails) {\n    return <p>Loading...</p>;\n  }\n\n  // Деструктуризация данных из movieDetails\n  const {\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    poster_path,\n    backdrop_path,\n    runtime,\n    tagline,\n  } = movieDetails;\n\n  // Создаем стиль для фона, используя линейный градиент и изображение фона из API\n  const backgroundImageStyles = {\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(https://www.themoviedb.org/t/p/w1920_and_h800_multi_faces${backdrop_path})`,\n  };\n\n  // Функция для округления рейтинга до одной десятой\n  const calculateRoundedRating = rating => {\n    const numericRating = Number(rating);\n    return numericRating.toFixed(1);\n  };\n\n  // Функция для расчета продолжительности фильма в часах и минутах\n  const calculateRuntime = runtime => {\n    const numericRuntime = Number(runtime);\n    const hours = Math.floor(numericRuntime / 60);\n    const minutes = numericRuntime % 60;\n    return { hours, minutes };\n  };\n\n  // Функция для извлечения года из даты выпуска фильма\n  const extractReleaseYear = releaseDate => {\n    return new Date(releaseDate).getFullYear();\n  };\n\n  // Расчет округленного рейтинга на основе полученного рейтинга из API\n  const roundedRating = calculateRoundedRating(vote_average);\n\n  // Расчет продолжительности фильма в часах и минутах на основе полученных данных из API\n  const { hours, minutes } = calculateRuntime(runtime);\n\n  // Извлечение года выпуска фильма из даты, полученной из API\n  const releaseYear = extractReleaseYear(release_date);\n\n  return (\n    <StyledMovieDetails>\n      {error !== null && (\n        <p className=\"errorBadge\">\n          Oops, some error occurred... Error message: {error}\n        </p>\n      )}\n      {isLoading && <Loader />}\n      <h1> Movie Id: {movieId}</h1> {/* !Заглушка для проверки movieId */}\n      <button onClick={handleGoBack} className=\"backBtn\">\n        Назад\n      </button>\n      <div className=\"movieInfoContainer\" style={backgroundImageStyles}>\n        {/* Отображаем постер фильма */}\n        <img\n          src={`https://image.tmdb.org/t/p/original${poster_path}`}\n          alt={title}\n          style={{ height: '460px' }}\n        />\n\n        <div className=\"infoContainer\">\n          <h2 className=\"title\">\n            {title} ( {releaseYear})\n          </h2>\n\n          <p></p>\n\n          <p className=\"slogan\">{tagline}</p>\n          <p>\n            Rating: {roundedRating} &bull; Duration: {`${hours}h ${minutes}m`}\n          </p>\n          <h3 className=\"infoTitle\">Overview</h3>\n          <p>{overview}</p>\n\n          <h3 className=\"infoTitle\">Genres</h3>\n          <ul className=\"genresList\">\n            {genres.map(genre => (\n              <li key={genre.id}>{genre.name.toLowerCase()}</li>\n            ))}\n          </ul>\n          <h3>Additional Information</h3>\n          <ul>\n            <li>Cast</li>\n            <li>Reviews</li>\n          </ul>\n          <NavLink className=\"header-link\" to=\"cast\">\n            Состав\n          </NavLink>\n          <Routes>\n            <Route path=\"cast\" element={<Cast />} />\n            <Route path=\"reviews\" element={<Reviews />} />\n          </Routes>\n        </div>\n      </div>\n    </StyledMovieDetails>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["BASE_URL","API_KEY","fetchMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","endpoint","options","response","_args","arguments","_context","prev","next","length","undefined","axios","concat","sent","console","log","abrupt","data","t0","stop","_x","apply","StyledMovieDetails","styled","_templateObject","_taggedTemplateLiteral","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieDetails","setMovieDetails","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","location","useLocation","fetchChosenMovie","id","params","language","message","finish","useEffect","_jsx","children","title","release_date","vote_average","overview","genres","poster_path","backdrop_path","runtime","tagline","backgroundImageStyles","backgroundImage","roundedRating","Number","toFixed","_calculateRuntime","numericRuntime","hours","Math","floor","minutes","calculateRuntime","releaseYear","Date","getFullYear","_jsxs","className","Loader","onClick","state","from","window","href","style","src","alt","height","map","genre","name","toLowerCase","NavLink","to","Routes","Route","path","element","Cast","Reviews"],"sourceRoot":""}